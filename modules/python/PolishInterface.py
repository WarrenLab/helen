import sys
import os
from modules.python.TextColor import TextColor
from modules.python.models.predict import predict
"""
The Call Consensus method generates base predictions for images generated through MarginPolish. This script reads
hdf5 files generated by MarginPolish and produces another Hdf5 file that holds all predictions. The generated hdf5 file
is given to stitch.py which then stitches the segments using an alignment which gives us a polished sequence.

The algorithm is described here:

  1) INPUTS:
    - directory path to the image files generated by MarginPolish
    - model path directing to a trained model
    - batch size for mini-batch prediction
    - num workers for mini-batch processing threads
    - output directory path to where the output hdf5 will be saved
    - gpu mode indicating if GPU will be used
  2) METHOD:
    - Call predict function that loads the neural network and generates base predictions and saves it into a hdf5 file
        - Loads the model
        - Iterates over the input images in minibatch
        - For each image uses a sliding window method to slide of the image sequence
        - Aggregate the predictions to get sequence prediction for the entire image sequence
        - Save all the predictions to a file
  3) OUTPUT:
    - A hdf5 file containing all the base predictions   
"""


def polish_genome(image_filepath, model_path, batch_size, num_workers, threads, output_dir, output_prefix, gpu_mode):
    """
    This method provides an interface too call the predict method that generates the prediction hdf5 file
    :param image_filepath: Path to directory where all MarginPolish images are saved
    :param model_path: Path to a trained model
    :param batch_size: Batch size for minibatch processing
    :param num_workers: Number of workers for minibatch processing
    :param threads: Number of threads for pytorch
    :param output_dir: Path to the output directory
    :param output_prefix: Prefix of the output HDF5 file
    :param gpu_mode: If true, predict method will use GPU.
    :return:
    """
    # create a filename for the output file
    output_filename = os.path.join(output_dir, output_prefix + '.hdf')

    # inform the output directory
    sys.stderr.write(TextColor.GREEN + "INFO: " + TextColor.END + "OUTPUT FILE: " + output_filename + "\n")

    # call the predict method to generate the prediction hdf5 file
    predict(image_filepath, output_filename, model_path, batch_size, num_workers, threads, gpu_mode)

    # notify the user that process has completed successfully
    sys.stderr.write(TextColor.GREEN + "INFO: " + TextColor.END + "PREDICTION GENERATED SUCCESSFULLY.\n")
